# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/bsherman/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="candy"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

plugins=(git fzf-tab fast-syntax-highlighting zsh-autosuggestions nix-shell)

# export VIM_MODE_VICMD_KEY="jk"
# export _Z_CMD="j"
# . ~/.local/bin/z.sh

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export PATH="$HOME/nvim/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="/opt/julia/bin:$PATH"
export EDITOR="nvim"
alias vim="nvim"
#
# source /home/bsherman/.local/venv/bin/activate
#
# export PATH="/usr/lib/postgresql/12/bin:${PATH}"
export PATH="$HOME/.tfenv/bin:${PATH}"
export PATH="$HOME/.pkenv/bin:${PATH}"
export PATH="$HOME/code/lua-language-server/bin:${PATH}"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

/usr/bin/keychain $HOME/.ssh/id_ed25519
source $HOME/.keychain/brad-ThinkPadP16-sh
# fpath+=${ZDOTDIR:-~}/.zsh_functions

if type rg &> /dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files'
fi

export FZF_DEFAULT_OPTS='
  -m --height 50% --layout=reverse
  --color=fg:#c5c9c5,fg+:#C8C093,bg:-1,bg+:#2d4f67
  --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#8a9a7b
  --color=prompt:#c4746e,spinner:#a292a3,pointer:#938AA9,header:#8ea4a2
  --color=border:#0d0c0c,label:#aeaeae,query:#d9d9d9
  --border="rounded" --border-label="Files" --border-label-pos="0" --preview-window="border-rounded"
  --padding="1" --prompt="> " --marker=">" --pointer="◆"
  --separator="" --scrollbar="│"
  --preview "([[ -f {} ]] && (bat --style=numbers --color=always {} ||
      cat {})) || ([[ -d {} ]] && (tree -C {} | less)) ||
      echo {} 2> /dev/null | head -200"
  --bind "ctrl-e:execute(echo {+} | xargs -o nvim)"
  --bind "?:toggle-preview"'

alias vv="pushd ~/.config/nvim; vim .; popd;"
alias vz="vim ~/.zshrc"
alias sz="source ~/.zshrc"
alias v3="vim ~/.config/i3/config"
export BAT_THEME="OneHalfDark"
alias cat="bat --theme=$BAT_THEME"
alias c='clear'
alias zj='zellij'


# define function that retrieves and runs last command
# function run-again {
#     # get previous history item
#     zle up-history
#     # confirm command
#     zle accept-line
# }

# define run-again widget from function of the same name
# zle -N run-again

# bind widget to Ctrl+X in viins mode
# bindkey -M viins '^p' run-again
# bind widget to Ctrl+X in vicmd mode
# bindkey -M vicmd '^p' run-again
bindkey '^H' backward-kill-word

export ANSIBLE_FORCE_COLOR=True
export ANSIBLE_STDOUT_CALLBACK=yaml
bindkey -M viins 'jk' vi-cmd-mode

function ghcidb {
    ghcid --target "bitnomial-$1" ${@:2}
}

function ghcidb-lenient {
    cmd="stack ghci bitnomial-%1"
    cmd="${cmd} --test --bench"
    cmd="${cmd} --ghci-options=-fno-code --ghci-options=-fno-break-on-exception --ghci-options=-fno-break-on-error"
    cmd="${cmd} --ghci-options=-v1 --ghci-options=-ferror-spans"
    cmd="${cmd} --ghci-options=-fdefer-typed-holes --ghci-options=-Wno-typed-holes"
    ghcid --command "${cmd}"
}

function target_sources {
    case $1 in
        (bitnomial-depository-web) echo -n src/web/depository/src ;;
        (bitnomial-exchange-web) echo -n src/web/exchange/src ;;
        (bitnomial-auth-web) echo -n src/web/auth/src ;;
    esac
}

function ghcid_run {
    target=$1
    src=$(target_sources $target)
    executable=$2
    ghcid --setup ":set args ${@:3}" \
      --restart "$src" \
      --command "stack ghci --main-is ${target}:exe:${executable} $target" \
      --run
}

alias sqlite="rlwrap -a -c -i sqlite3"
alias sqlite3="rlwrap -a -c -i sqlite3"
alias htop='btm'
alias man='tldr'
alias shake='stack exec shake --'

# alias ls='lsd'
alias ls="eza --color=always --long --git --no-filesize --icons=always --no-time --no-user --no-permissions"
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

export LOCAL_CONN_STRING="postgresql://app:password123@localhost:5432/main"

# source /home/bsherman/.config/broot/launcher/bash/br

export PATH="/home/bsherman/.bitcoin/bin:$PATH"
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:/home/bsherman/go/bin"
export PATH="$PATH:/home/bsherman/emacs/bin"
export PATH="$PATH:/opt/Beekeeper Studio"
export PATH="$PATH:/home/bsherman/.yarn/bin"

function vpnup {
  sudo wg-quick up wg0
}

function vpndown {
  sudo wg-quick down wg0
}

function build_deploy_vagrant {
  # Build code for currently checked out commit
  shake dev-pack

  # Start vagrant
  cd ops/deploy/vagrant/all
  vagrant up --no-provision

  # Provision vagrant with the tarball you just built
  ansible-playbook vagrant.yaml -e btnl_rev=$(git rev-parse HEAD) -e prompt_confirm=false
}

alias luamake=/home/bsherman/code/lua-language-server/3rd/luamake/luamake
export VAULT_ADDR=http://127.0.0.1:8200

if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
    . $HOME/.nix-profile/etc/profile.d/nix.sh
    export LOCALE_ARCHIVE="/usr/lib/locale/locale-archive"
    export TERMINFO=$HOME/.nix-profile/share/terminfo
fi

# opam configuration
[[ ! -r /home/bsherman/.opam/opam-init/init.zsh ]] || source /home/bsherman/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null



# prompt_nix_shell_setup


source "$HOME/.cargo/env"


function author_lines () {
	if [ -z "$1" ]
	then
		pattern="."
	else
		pattern="$1"
	fi
	git ls-files "${pattern}" | while read f
	do
		git blame --line-porcelain $f | grep '^author '
	done | sort -f | uniq -ic | sort -n
}

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /nix/store/34m359hc8r2r8h9rsavysjmvyk29m0m6-nomad-1.4.4/bin/nomad nomad
#compdef gt
###-begin-gt-completions-###
#
# yargs command completion script
#
# Installation: gt completion >> ~/.zshrc
#    or gt completion >> ~/.zprofile on OSX.
#
_gt_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" gt --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _gt_yargs_completions gt
###-end-gt-completions-###

# eval "$(starship init zsh)"

export GPG_TTY=$(tty)
gpgconf --launch gpg-agent

. "$HOME/.asdf/asdf.sh"
# append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)
# initialise completions with ZSH's compinit
# autoload -Uz compinit && compinit
# source ~/.oh-my-zsh/custom/plugins/fzf-tab/fzf-tab.plugin.zsh

# bun completions
[ -s "/home/bsherman/.bun/_bun" ] && source "/home/bsherman/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


# fly
export FLYCTL_INSTALL="/home/bsherman/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# eval "$(/home/bsherman/.local/bin/mise activate zsh)"


if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
    . $HOME/.nix-profile/etc/profile.d/nix.sh
    export LOCALE_ARCHIVE="$(nix-env --installed --no-name --out-path --query glibc-locales)/lib/locale/locale-archive"
    export XDG_DATA_DIRS="$HOME/.nix-profile/share:$XDG_DATA_DIRS"
fi

[ -f "/home/bsherman/.ghcup/env" ] && . "/home/bsherman/.ghcup/env" # ghcup-env

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

function fzf-kill-processes() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

function stack-packages() {
  pkg=$(stack ide packages --stdout | fzf)
  stack build $pkg
}

if [ -e /home/bsherman/.nix-profile/etc/profile.d/nix.sh ]; then . /home/bsherman/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

eval "$(zoxide init --cmd cd zsh)"

# pnpm
export PNPM_HOME="/home/bsherman/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end


export ANTHROPIC_API_KEY=$(op item get "Anthropic API KEY" --fields "notesPlain")

eval "$(direnv hook zsh)"
