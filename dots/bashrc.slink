# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Colors
# change 0 to 1 for bold, 4 for underline, and 5 for slow blink
BLACK="\[\033[0;30m\]"
RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
WHITE="\[\033[0;37m\]"
DARK_GRAY="\[\033[1;30m\]"
LIGHT_BLUE="\[\033[1;34m\]"
LIGHT_GREEN="\[\033[1;32m\]"
LIGHT_CYAN="\[\033[1;36m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_PURPLE="\[\033[1;35m\]"
#
# Vars
# \d : date in "Weekday Month Date" format
# \t : the current time in 24-hour HH:MM:SS format
# \T : the current time in 12-hour HH:MM:SS format
# \w : the current working directory
# \s : the name of the shell
# \n : newline
# \[ : begin a sequence of non-printing characters,
# \] : end a sequence of non-printing characters

exit_color() {
    if [[ $1 = 0 ]];
    then
        echo -e "\033[0;32m"
    else
        echo -e "\033[0;31m"
    fi
}
exit_face() {
    if [[ $1 = 0 ]];
    then
        echo -e "^_^"
    else
        echo -e "O_O"
    fi
}

set_bash_prompt() {
#     if [ "$color_prompt" = yes ]; then
    local last_exit=$?
    if [ $EUID -eq 0 ]; then
        PS1="${RED}[\d \t \u@\h \w]\#\[\e[m\] "
    else
        PS1="\n${BLUE}[\@ \d] ->\n${GREEN} \u@\h:\w\n \[\$(exit_color $last_exit)\]\$(exit_face $last_exit) ${GREEN}\$\[\e[0m\] "
    fi
#     else
#         PS1='${debian_chroot:+($debian_chroot)}\w $ '
#     fi
}
PROMPT_COMMAND=set_bash_prompt

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)} \u\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -F --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -FGlAhp'
alias la='ls -A'
alias l='ls -CF'
alias sl='ls -F --color=auto'
alias cls='clear;ls'
alias csl='clear;ls'
alias c='clear'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

## Useful aliases

# Restart network connection
alias nmr='sudo service network-manager restart'
# Easy aliases for ssh at school
alias st00='ssh bsherma1@student00.cse.nd.edu'
alias st01='ssh bsherma1@student01.cse.nd.edu'
alias st02='ssh bsherma1@student02.cse.nd.edu'
alias st03='ssh bsherma1@student03.cse.nd.edu'
alias dsg1='ssh bsherma1@dsg1.crc.nd.edu'
# Easy aliases to quickly update
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
alias install='sudo apt-get install'
alias remove='sudo apt-get autoremove'
alias U='sudo apt-get update && sudo apt-get upgrade && sudo apt-get autoremove'
# Don't let ping run forever
alias ping='ping -c 4'
# More useful shortcuts
alias k='exit'
alias cd..='cd ../'
alias ..='cd ../'
alias ...='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias path='echo $PATH'
alias back='cd -'
alias mkdir='mkdir -pv'
alias wget='wget -c'
alias myip="curl http://ipecho.net/plain; echo"
alias activate='chmod +x'
alias reload='source ~/.bashrc'
alias open='gnome-open'
alias mkae='make'
alias maek='make'
# Simple command aliases
alias cp='cp -vi'
alias mv='mv -vi'
alias rm='rm -v'
alias df='df -h'
alias diff='colordiff'
alias ln='ln -v'
alias less='less -FSRXc'
# Easily edit config files
alias vim='/usr/bin/nvim' # try using neovim instead of vim
alias ovim='/usr/bin/vim' #use regular old vim
alias vi3='vim ~/.i3/config'
alias vv='/usr/bin/vim ~/.vimrc'
alias vb='vim ~/.bashrc'
alias nv='nvim ~/.config/nvim/init.vim'

# Modify variables
export PATH=/home/bradsherman/bin:$PATH
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:/usr/local/android-studio/bin
export PATH=$PATH:/home/bradsherman/.cargo/bin
export LD_LIBRARY_PATH=/usr/local/src
export EDITOR="/usr/bin/nvim"
set -o noclobber
# Make tab-completion case insensitive
set completion-ignore-case On

## Now make some useful functions

# Make a new directory and move into it
mcd () { mkdir -p "$1" && cd "$1"; }

# Pretty man pages
man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            man "$@"
}

# Codi
# usage: codi [filetype] [filename]
codi() {
    vim $2 -c \
        " let g: startify_disable_at_vimenter = 1 |\
        set bt=nofile ls=0 noru nonu nornu |\
        hi ColorColumn ctermbg=NONE |\
        hi VertSplit ctermbg=NONE |\
        hi NonText ctermfg=0 |\
        Codi ${1:-python}"
}

# Extract any kind of compressed file format
: '
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        NAME=${1%.*}
        mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ../$1    ;;
          *.tar.gz)    tar xvzf ../$1    ;;
          *.tar.xz)    tar xvJf ../$1    ;;
          *.lzma)      unlzma ../$1      ;;
          *.bz2)       bunzip2 ../$1     ;;
          *.rar)       unrar x -ad ../$1 ;;
          *.gz)        gunzip ../$1      ;;
          *.tar)       tar xvf ../$1     ;;
          *.tbz2)      tar xvjf ../$1    ;;
          *.tgz)       tar xvzf ../$1    ;;
          *.zip)       unzip ../$1       ;;
          *.Z)         uncompress ../$1  ;;
          *.7z)        7z x ../$1        ;;
          *.xz)        unxz ../$1        ;;
          *.exe)       cabextract ../$1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
};'

